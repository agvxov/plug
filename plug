#!/usr/bin/python3
# "PlacehoLder Un- and Generator"

import sys
import re
from enum import Enum, auto

BLUE    = ''
YELLOW  = ''
GREEN   = ''
RED     = ''
BOLD    = ''
NORMAL  = ''
MAGENTA = ''
REVERSE = ''

def has_color():
	import os
	return "color" in os.environ.get('TERM')

def def_colors():
	global BLUE, YELLOW, GREEN, RED, BOLD, NORMAL, MAGENTA, REVERSE
	BLUE    = '\033[34m'
	YELLOW  = '\033[33m'
	GREEN   = '\033[32m'
	RED     = '\033[31m'
	BOLD    = '\033[1m'
	NORMAL  = '\033[0m'
	MAGENTA = '\033[35m'
	REVERSE = '\033[7m'

def undef_colors():
	global BLUE, YELLOW, GREEN, RED, BOLD, NORMAL, MAGENTA, REVERSE
	BLUE    = ''
	YELLOW  = ''
	GREEN   = ''
	RED     = ''
	BOLD    = ''
	NORMAL  = ''
	MAGENTA = ''
	REVERSE = ''

class Error(Enum):
	PARAM_MISS = auto()
	UNK_FLAG   = auto()
	IO         = auto()
	UNK_OPT    = auto()
	UNTERM_DEF = auto()

def usage():
	print(
'''{GREEN}{BOLD}{argv0}{NORMAL} {BOLD}{YELLOW}({BLUE}<option>{YELLOW}|{BLUE}<file>{YELLOW})+{NORMAL}
  {YELLOW}Position insensitive options:{NORMAL}
	{GREEN}{BOLD}-h{NORMAL} {BLUE}{BOLD}{NORMAL}                       : print help and exit
	{GREEN}{BOLD}--color{NORMAL} {BOLD}{BLUE}never{YELLOW}|{BLUE}auto{YELLOW}|{BLUE}always{NORMAL} : set output coloring option; default: auto
  {YELLOW}Position sensitive options:{NORMAL}
	{GREEN}{BOLD}-d{NORMAL} {BLUE}{BOLD}<name> <value>{NORMAL}         : define placeholder
	{GREEN}{BOLD}-e{NORMAL} {BLUE}{BOLD}<name> <file>{NORMAL}          : define placeholder as the contents of <file>
	{GREEN}{BOLD}-u{NORMAL} {BLUE}{BOLD}<placeholder>{NORMAL}          : ungenerate placeholder (ie. collapse)
	{GREEN}{BOLD}-g{NORMAL} {BLUE}{BOLD}<placeholder>{NORMAL}          : generate placeholder (ie. expand)
  Every argument not starting with '-' is considered a file.
  Options are evaluated in the order they are found and can be repeated.
  If multiple files are specified, actions apply to all of them.
  {MAGENTA}{REVERSE}NOTE:{NORMAL} do not forget to specify your file before the desired actions.

  {YELLOW}{BOLD}Placeholder syntax:{NORMAL}
	#placeholder<<name>> COLLAPSED
	{MAGENTA}{REVERSE}NOTE:{NORMAL} text located before the placeholder on the same line is preserved,
	 allowing for commenting it out
	{YELLOW}Builtins:{NORMAL}
	  Builtin placeholder names must start with '@', these names are reserved.
	  Every Plug implementation is free to define it's own builtins.
	  This Plug implementation defines the following builtins:
		{BLUE}@all{NORMAL}
		{BLUE}@gnu-tofile-*{NORMAL}

  {YELLOW}{BOLD}Example:{NORMAL}
	{GREEN}$ cat ex1.txt{NORMAL}
	original text
	#placeholder<hw> COLLAPSED
	some more original text
	{GREEN}$ plug -f ex1.txt -d hw 'hello world' -g hw{NORMAL}
	{GREEN}$ cat ex1.txt{NORMAL}
	original text
	#placeholder<hw> BEGIN
	hello world
	#placeholder<hw> END
	some more original text
'''.format(**globals(), argv0 = sys.argv[0]), end='')



placeholders = {}

placeholder = '#placeholder<{0}>'
placeholder_collapsed  = placeholder + ' COLLAPSED'
placeholder_expanded_beginning = placeholder + ' BEGIN'
placeholder_expanded_ending	= placeholder + ' END'
del placeholder

re_placeholder_collapsed          = re.compile('''^(.*){0}.*'''.format(placeholder_collapsed.format('''([a-zA-Z0-9_@-]+)''')), re.M)
re_placeholder_expanded_beginning = re.compile('''^(.*){0}.*'''.format(placeholder_expanded_beginning.format('''([a-zA-Z0-9_@-]+)''')), re.M)
re_placeholder_expanded_ending    = re.compile('''^.*{0}.*'''.format(placeholder_expanded_ending.format('''([a-zA-Z0-9_@-]+)''')), re.M)


builtins = [
	('''@gnu-tofile-(.*)''',
'''payload_data=$(sed -n '/#placeholder<payload> START$/,/#placeholder<payload> END$/p' "$(realpath $0)")
payload_data=$(echo "$payload_data" | grep -vE '#placeholder<payload> (START|END)')
[ -z "$PAYLOADOUT" ] && PAYLOADOUT="out"
echo "$payload_data" > "$PAYLOADOUT"'''
),
]

def builtin_lookup(phl : str) -> str:
	for i in builtins:
		regex, value = i
		m = re.compile(regex).match(phl)
		if m:
			value = value.format(m.groups()[1:])
			return value
	return ''

def gen(s : str, phl : str) -> str:
	ret = ''
	l = 0
	is_all = (phl == '@all')

	for m in re_placeholder_collapsed.finditer(s):
		if (not is_all) and (m.group(2) != phl):
			continue
		ret += s[l : m.start(0)]
		ret += m.group(1) + placeholder_expanded_beginning.format(phl) + '\n'
		ret += builtin_lookup(phl) if not is_all and phl[0] == '@' else placeholders[phl]
		ret += '\n' + m.group(1) + placeholder_expanded_ending.format(phl)
		l = m.end(0)
	ret += s[l:]
	return ret

def ungen(s : str, phl : str) -> str:
	ret = ''
	l = 0
	is_all = (phl == '@all')
	for m in re_placeholder_expanded_beginning.finditer(s):
		if((not is_all) and m.group(2) != phl):
			continue
		ret += s[l : m.start(0)]
		ret += m.group(1) + placeholder_collapsed.format(phl)
		l = m.end(0)
		for me in re_placeholder_expanded_ending.finditer(s[m.end(0):]):
			if(me.group(1) != phl):
				continue
			l = m.end(0) + me.end(0)
			break
	ret += s[l:]
	return ret

def get_param(argv : [str], i : int) -> str:
	try:
		param = argv[i]
	except:
		error_and_quit(Error.PARAM_MISS, [argv[i-1]])
	return param

def error_and_quit(e : int, argv : [str]) -> None:
	msg = {
		Error.PARAM_MISS : "Missing parameter to flag '{0}'.",
		Error.UNK_FLAG   : "Unrecognized flag '{0}'.",
		Error.UNK_OPT    : "Unknown option passed to {0}: '{1}'.",
		Error.IO         : "I/O error encountered while interacting with '{0}'.",
		Error.UNTERM_DEF : "Unterminated definition ({0}).",
	}
	print("{RED}".format(**globals()), end='')
	print(msg[e].format(*argv, **globals()), end='')
	print("{NORMAL}".format(**globals()))
	exit(e.value)

def plug(argv : [str]) -> int:
	if has_color:
		def_colors()

	sfiles = []

	i = -1
	while i < len(argv)-1:
		if argv[i] == '-h' or argv[i] == '--help':
			usage()
			exit(0)
		i = i + 1
		if argv[i-1] == '--color':
			p = get_param(argv, i)
			if p == 'always':
				def_colors()
			elif p == 'auto':
				if has_color:
					def_colors()
			elif p == 'never':
				undef_colors()
			else:
				error_and_quit(Error.UNK_OPT, ['--color', p])
			continue

	i = -1
	while i < len(argv)-1:
		i = i + 1

		# 2 param opt
		if argv[i] == '-d':
			try:
				placeholders[argv[i+1]] = argv[i+2]
				i = i + 2
			except:
				error_and_quit(Error.UNTERM_DEF, ['-d'])
			continue

		if argv[i] == '-e':
			try:
				with open(argv[i+2], 'r') as f:
					placeholders[argv[i+1]] = f.read()
				i = i + 2
			except:
				error_and_quit(Error.UNTERM_DEF, ['-e'])
			continue

		# 1 param opt
		i = i + 1

		if argv[i-1] == '-u':
			for sf in sfiles:
				try:
					with open(sf, 'r') as f:
						s = ungen(f.read(), get_param(argv, i))
					with open(sf, 'w') as f:
						f.write(s)
				except:
					error_and_quit(Error.IO, [sf])
			continue

		if argv[i-1] == '-g':
			for sf in sfiles:
				with open(sf, 'r') as f:
					s = gen(f.read(), get_param(argv, i))
				with open(sf, 'w') as f:
					f.write(s)
			continue
		
		if argv[i-1][0] != '-':
			sfiles.append(get_param(argv, i))
			continue

		error_and_quit(Error.UNK_FLAG, [argv[i-1]])
	return 0
	

if __name__ == '__main__':
	raise SystemExit(plug(sys.argv[1:]))
